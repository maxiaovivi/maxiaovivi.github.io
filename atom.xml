<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>潇潇潇的博客</title>
  
  <subtitle>君应有语：“渺万里层云，千山暮雪，只影向谁去”</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-03-04T13:54:44.387Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>潇潇潇</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>docker的简单使用（一）</title>
    <link href="http://example.com/2023/03/04/docker/"/>
    <id>http://example.com/2023/03/04/docker/</id>
    <published>2023-03-04T13:48:49.000Z</published>
    <updated>2023-03-04T13:54:44.387Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker-简单使用（一）"><a href="#Docker-简单使用（一）" class="headerlink" title="Docker 简单使用（一）"></a>Docker 简单使用（一）</h1><p>近些日子都在忙于毕业设计，当中遇到了一些需要部署环境的过程。恰巧之前购买过Poulton的深入浅出学习docker，就希望能利用dockr来完成这些事情。</p><h2 id="1-在ArchLinux下安装docker"><a href="#1-在ArchLinux下安装docker" class="headerlink" title="1.在ArchLinux下安装docker"></a>1.在ArchLinux下安装docker</h2><ol><li><p>安装Docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查找Docker</span></span><br><span class="line">sudo pacman —Ss docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装Docker</span></span><br><span class="line">sudo pacman -S docker</span><br></pre></td></tr></table></figure></li><li><p>开启Docker服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开启Docker服务</span></span><br><span class="line">sudo systemctl start docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开机自启动服务</span></span><br><span class="line">sudo systemctl enable docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询Docker服务运行状态</span></span><br><span class="line">sudo systenmctl status docker</span><br></pre></td></tr></table></figure></li><li><p>添加当前用户到docker用户组</p><blockquote><p>Docker守护程序绑定到Unix套接字而不是TCP端口。默认情况下，该用户拥有Unix套接字root，其他用户只能使用来访问它sudo。Docker守护程序始终以root用户身份运行。<br>如果你不想在前言docker与命令sudo，创建一个名为UNIX组docker和用户添加到它。当Docker守护程序启动时，它将创建一个可由该docker组成员访问的Unix套接字。  </p></blockquote><p>执行以下命令解决该问题：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看当前系统有哪些组，里边有docker组，验证docker是否有当前用户</span></span><br><span class="line">sudo cat /etc/group</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加docker用户组</span></span><br><span class="line">sudo groupadd docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检测当前用户是否已经在docker用户组当中,没有就会添加，<span class="variable">$USER</span> 是你的用户名</span></span><br><span class="line">sudo gpasswd -a $USER docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新用户组</span></span><br><span class="line">newgrp docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重启docker服务</span></span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure></li><li><p>验证Docker安装状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看安装版本</span></span><br><span class="line">docker version</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看Docker信息</span></span><br><span class="line">docker info</span><br></pre></td></tr></table></figure></li></ol><img src="/home/mxvivi/.config/Typora/typora-user-images/image-20230303135113797.png" alt="image-20230303135113797" style="zoom:67%;" /><img src="/home/mxvivi/.config/Typora/typora-user-images/image-20230303135039903.png" alt="image-20230303135039903" style="zoom:67%;" /><p>如图所示即安装成功。</p><h2 id="2-镜像拉取与删除"><a href="#2-镜像拉取与删除" class="headerlink" title="2.镜像拉取与删除"></a>2.镜像拉取与删除</h2><ol><li><p>Docker主机在下载完成之初是没有本地镜像的（通常存放在&#x2F;var&#x2F;lib&#x2F;docker&#x2F;<storage-driver>），需要在Docker Hub中进行Pull（拉取）。大部分流行的操作系统和应用在官方的仓库都可以找到对应的镜像。只需要知道命名与标签就可以在官方仓库中定位：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拉取格式</span></span><br><span class="line">docker image pull &lt;repository&gt;:&lt;tag&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">从官方拉取带有latest标签的Ubuntu镜像, 注意这个laetst标签并不代表一定是最新的镜像。比如Alpine的最新镜像的标签通常是edge</span></span><br><span class="line">docker image pull ubuntu:latest</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/home/mxvivi/.config/Typora/typora-user-images/image-20230303135815253.png" alt="image-20230303135815253"></p></li><li><p>Docker的镜像是通过堆叠镜像层来构成的，若需要详细查看则输入以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image inspect ubuntu:latest</span><br></pre></td></tr></table></figure><p><img src="/home/mxvivi/.config/Typora/typora-user-images/image-20230303140933843.png"></p></li><li><p>镜像删除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image rm ubuntu:latest</span><br></pre></td></tr></table></figure></li></ol><h2 id="3-运行容器"><a href="#3-运行容器" class="headerlink" title="3.运行容器"></a>3.运行容器</h2><h3 id="检测Docker-daemon是否运行"><a href="#检测Docker-daemon是否运行" class="headerlink" title="检测Docker daemon是否运行"></a>检测Docker daemon是否运行</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl is-active docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">若返回 active 则在运行</span></span><br></pre></td></tr></table></figure><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container run -it ubuntu:latest /bin/bash</span><br></pre></td></tr></table></figure><p><img src="/home/mxvivi/.config/Typora/typora-user-images/image-20230303142749947.png" alt="image-20230303142749947"></p><p>出现root@81d12951edb0表明已经进入容器运行。@后边的12位字符是容器唯一ID的前12位字符。</p><h3 id="容器进程"><a href="#容器进程" class="headerlink" title="容器进程"></a>容器进程</h3><p>通过输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -elf</span><br></pre></td></tr></table></figure><p>可以看到：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">F S UID          PID    PPID  C PRI  NI ADDR SZ WCHAN  STIME TTY          TIME CMD</span><br><span class="line">4 S root           1       0  0  80   0 -  1156 do_wai 13:27 pts/0    00:00:00 /bi</span><br><span class="line">4 R root          17       1  0  80   0 -  1765 -      13:36 pts/0    00:00:00 ps </span><br></pre></td></tr></table></figure><p>上边看起来有俩个进程，但实际上第二个进程是我们使用查询命令生成的临时进程。也就是说容器只运行了一个进程 &#x2F;bin&#x2F;bash。 如果输入exit来退出进程。也就是容器也会被销毁掉。如果用 Ctrl+PQ的组合按键，将容器放在后台运行。</p><p>此时</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker container stop ubuntu</span><br><span class="line">docker container rm ubuntu</span><br></pre></td></tr></table></figure><p>即可优雅的停止并删除容器。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Docker-简单使用（一）&quot;&gt;&lt;a href=&quot;#Docker-简单使用（一）&quot; class=&quot;headerlink&quot; title=&quot;Docker 简单使用（一）&quot;&gt;&lt;/a&gt;Docker 简单使用（一）&lt;/h1&gt;&lt;p&gt;近些日子都在忙于毕业设计，当中遇到了一些需要</summary>
      
    
    
    
    
    <category term="计算机技术" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>又一次见面，真好</title>
    <link href="http://example.com/2023/03/04/test/"/>
    <id>http://example.com/2023/03/04/test/</id>
    <published>2023-03-04T11:22:41.000Z</published>
    <updated>2023-03-04T14:01:58.287Z</updated>
    
    <content type="html"><![CDATA[<h1 id="新的一天"><a href="#新的一天" class="headerlink" title="新的一天"></a>新的一天</h1><p><img src="/home/mxvivi/Blog/public/img/bg-11.jpg"></p><p>之前使用过的wordpress由于没有继续为服务器续费就停止使用啦。现在Hexo与github上又随缘的弄了一下博客。记录一下我做的毕业设计吧。</p>]]></content>
    
    
    <summary type="html">我是潇潇潇</summary>
    
    
    
    
    <category term="test" scheme="http://example.com/tags/test/"/>
    
  </entry>
  
</feed>
